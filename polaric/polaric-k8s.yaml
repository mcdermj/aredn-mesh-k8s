---
kind: ConfigMap
apiVersion: v1
metadata:
  name: polaric-config
  labels:
    app: polaric
    tier: application
data:
  server.ini: |
    ################################################################
    # server.ini - configuration of polaric-aprsd
    # See http://aprs.no/dokuwiki/doku.php?id=aprd_config_reference
    #
    # Note that some of these are managed by web-interface.
    # For those, the values defined in this file are default values.
    ################################################################

    timezone = America/Los_Angeles


    #################################################
    # You MUST change mycall before starting server!
    # It is usually a HAM radio callsign.
    #################################################

    default.mycall = NH6Z


    #################################################
    # HTTP server configuration
    #################################################

    httpserver.port = 8081

    # Securesession - set to true to force the use of https
    # for login sessions (secure flag on cookie).
    httpserver.securesession = false

    # This is used to generate CORS header. Regular expression.
    # Use this to limit what orgins that should accept this server.
    # Default is to accept all origins
    httpserver.alloworigin = .*

    # Regular expressions to match what usernames that are
    # authorized as admin or for updating. These are normally
    # set by web interface.
    user.admin = amcdermond
    user.update = xxx

    # Uncomment and adapt these, if needed.
    # httpserver.passwdfile = /etc/polaric-aprsd/passwd
    # httpserver.host = http://nh6z-aprs-client.local.mesh

    # Location for static files. Normally, you shouldn't
    # need to change this.
    # httpserver.filedir = /usr/share/polaric



    ####################################################
    # trusted origin allows you to limit what webapp
    # instances can access the server through websocket
    # Uncomment and configure with a regular expression
    # that matches your domain(s)
    ####################################################
    #
    # trusted.origin = http(s)?://yourdomain\.org.*


    ############################################
    # Channel-setup
    ############################################

    channels = aprsIS
    channel.default.inet = aprsIS

    #
    # To send your own position, set this to true and
    # configure. See documentation.
    #
    ownposition.tx.on = false



    ###############################################
    # Log levels: 0 = DEBUG (and higher)
    #             1 = INFO (and higher)
    #             2 = WARN (and higher)
    #             4 = ERROR
    #
    # set channel.logpackets to false to stop showing
    # all incoming APRS packets
    ##################################################

    aprsd.log.level = 1
    channel.logpackets = true


    #################################################
    # APRS-IS channels
    #
    # Note: You must compute the correct passcode
    # corresponding to your mycall to be able to
    # send messages to  APRS-IS.
    #################################################

    channel.aprsIS.on   = true
    channel.aprsIS.type = APRSIS
    channel.aprsIS.host = 10.0.3.10
    channel.aprsIS.port = 10152

    #
    # APRS-IS passcode to be allowed to send data to APRS-IS. Uncomment
    # the following and replace '00000' with your own passcode
    #
    # channel.aprsIS.pass = 00000


    #######################################
    # TNC channel and igate
    #######################################

    channel.radio.on = false
    channel.radio.type = TNC2
    # channel.radio.port = /dev/ttyACM0
    # channel.radio.baud = 9600

    igate.on = false


    #######################################
    # APRS objects setup
    #######################################

    objects.transmit.period = 240
    objects.forceupdate = true


    #######################################
    # APRS Messages and commands
    #######################################

    message.auth.key = ******
    remotectl.on = false
    remotectl.connect = NOCALL


    #######################################
    # Map trails
    #######################################

    map.trail.maxAge = 20
    map.trail.maxPause = 10


    #######################################
    # Properties of map overlay
    # default icon
    #######################################

    map.icon.default = sym00.png
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: polaric-aprsd
  labels:
    app: polaric
    tier: application
spec:
  replicas: 3
  selector:
    matchLabels:
      app: polaric
      tier: application
  serviceName: polaric-aprsd
  template:
    metadata:
      labels:
        app: polaric
        tier: application
    spec:
      containers:
      - name: polaric-aprsd
        image: mcdermj/polaric-aprsd
        volumeMounts:
        - name: polaric-config
          mountPath: /etc/polaric-aprsd/server.ini
          subPath: server.ini
        - name: polaric-passwd
          mountPath: /etc/polaric-aprsd/passwd
          subPath: passwd
        - name: polaric-aprsd-data
          mountPath: /var/lib/polaric
        ports:
          - containerPort: 8081
      volumes:
      - name: polaric-config
        configMap:
          name: polaric-config
      - name: polaric-passwd
        secret:
          secretName: polaric-aprsd-admin
      - name: polaric-aprsd-data
        persistentVolumeClaim:
          claimName: polaric-aprsd-data
  volumeClaimTemplates:
    - metadata:
        name: polaric-aprsd-data
        labels:
          app: polaric
          tier: application
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: longhorn
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: polaric-aprsd
  labels:
    app: polaric
    tier: application
spec:
  ports:
    - name: polaric-aprsd
      protocol: TCP
      port: 8081
      targetPort: 8081
  selector:
    app: polaric
    tier: application
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: polaric-web-config
  labels:
    app: polaric
    tier: webserver
data:
  config.js: |
     /*
       * Map browser configuration
       *
       */

      /* Default projection */
      PROJECTION( "EPSG:900913" );

      /* Default center and scale */
      CENTER    ( -122.894726, 44.530288 );
      SCALE     ( 100 );

      SERVER("http://nh6z-aprs-client.local.mesh:80");
      AJAXPREFIX("srv");
      WSPREFIX("srv");

      ICONPATH("aprsd");

      DEFAULT_ICON(61);

      /*
       * Layers.
       *
       * Use the LAYERS function to define map layers. This function takes some options and an array
       * of layers as arguments. Use options to tell if layers are base-layers, and to set a
       * predicate (a function that returns a boolean to say if layers should be displayed or not.
       * You can also use these options to set projection or the attribution.
       *
       * Use OpenLayers to define layers:  http://openlayers.org/en/latest/apidoc/ol.layer.html
       * An option 'name' should be set on all layers to identify each of them in the layer
       * switcher list.
       *
       * The createLayer_WFS is a convenience function to simplify creation of WFS layer
       * (see example below).
       */

      LAYERS(
         { base: true,
           predicate: TRUE,
           projection: "EPSG:900913",
           attribution: "Openstreetmap"
         },
         [
            new ol.layer.Tile({
              name: 'OpenStreetMap',
              source: new ol.source.OSM({
                  url: 'http://nh6z-tiles.local.mesh/osm_tiles/{z}/{x}/{y}.png'
              })
            })
         ]
      );
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: polaric-webserver
  labels:
    app: polaric
    tier: webserver
spec:
  replicas: 3
  selector:
    matchLabels:
      app: polaric
      tier: webserver
  template:
    metadata:
      labels:
        app: polaric
        tier: webserver
    spec:
      containers:
      - name: polaric-webserver
        image: mcdermj/polaric-webapp2
        volumeMounts:
        - name: polaric-web-config
          mountPath: /usr/share/nginx/html/config.js
          subPath: config.js
        ports:
          - containerPort: 80
      volumes:
      - name: polaric-web-config
        configMap:
          name: polaric-web-config
---
apiVersion: v1
kind: Service
metadata:
  name: polaric-webserver
  labels:
    app: polaric
    tier: webserver
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
  selector:
    app: polaric
    tier: webserver
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: polaric-aprsd-ingress
  labels:
    app: polaric
    tier: application
spec:
  rules:
    - host: nh6z-aprs-client.local.mesh
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: polaric-webserver
                port:
                  number: 80
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: polaric-webserver-ingress
  labels:
    app: polaric
    tier: webserver
  annotations:
    traefik.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: nh6z-aprs-client.local.mesh
      http:
        paths:
          - path: /srv
            pathType: Prefix
            backend:
              service:
                name: polaric-aprsd
                port:
                  number: 8081
